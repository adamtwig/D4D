# Meeting Minutes

10_06_2015

Install RStudio on Fedora 16 (Okami)


Matrix 1 is too sparse for an adjacency matrix.
Person only calls from within a few antenna sites, so a large number of columns
are zeroes.

Adjacency list (linked-list)
Each person has own list.
Post processing can sort.

Reading into Numpy, Numpy data structures and built in routines should be fast.
Python I/O is probably slower.
There are some more efficient ways to do it.

Could produce matrix using C/C++, but for most part use Python.
Use an efficient data structure.

Bi-clustering.
Cluster based on high frequency antenna usage.

Have location geographically of each tower.
Visualizing in archGIS -> map data


Home locations
High number in a few compared to low number for rest of users.
Power law -> could be the pattern.
Can build a chart -> #users, #antennas


Interested in whether changing definition of home location affects
visualization!
Can visualize for one user, but can't do this for 300,000 users.
Which is way we want to see adjacency list.

Can visualize variability using heatmap of antenna using archGIS.
Can measure distance between two antennas.


Would need to map each antenna (site_id) back to geography.


For user #1, where do they make the most calls.
For user #2, where do they make the most calls.
For user #3, ...
...

Aggregate them, 
antenna #1 has x users associated with them.
antenna #2 has y users associated with them.
antenna #3 has z users...
...

Heatmap using archGIS
Library in archGIS, say what each antenna looks like for polygon.
Dataset on okami with Lat,Lng coordinates (context_data).


Population density picture based on where people made calls.

Now we change definition of homes.
For user #1, it's where they called in evening.
Where called on weekend.
At end compare population density heatmaps.

Quantify it. How much numbers changed from definition to definition.



Can follow person through year by using dataset 3.
In general two things: zooming in on individual, or aggregating.

